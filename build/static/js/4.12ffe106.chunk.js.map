{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","className","classes","form","onSubmit","event","preventDefault","enteredText","current","value","commentData","text","quoteId","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.12ffe106.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const {sendRequest, status, error} = useHttp(addComment);\n\n  const {onAddedComment} = props;\n\n  useEffect(() => {\n    if(status === 'completed' && !error){\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    sendRequest({commentData : {text: enteredText}, quoteId : props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>)\n      }\n      <div className={classes.control}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const {quoteId} = params;\n\n  const {sendRequest, status, data:loadedComments } = useHttp(getAllComments);\n\n  useEffect(()=>{\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner/>\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && (loadedComments && loadedComments.length >0)) {\n    comments = <CommentsList comments={loadedComments}/>;\n  }\n\n  if (status === \"completed\" && (!loadedComments && loadedComments.length === 0)) {\n    comments = <p className='centered'>No comments were addded yet !</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Fragment } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Route, Link, useRouteMatch } from \"react-router-dom\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\nimport LoadingSpinner from '../components/UI/LoadingSpinner';\n\nimport useHttp from \"../hooks/use-http\";\n\nimport {getSingleQuote} from \"../lib/api\";\n\nimport{useEffect} from 'react';\n\nconst QuoteDetail = () => {\n  const params = useParams();\n  const {quoteId} = params;\n  const match = useRouteMatch();\n\n  const {\n    sendRequest,\n    status,\n    data: quote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (!quote.text) {\n    return <p>No quote found!</p>;\n  }\n\n  if (error) {\n    return <div className=\"centered focused\">{error}</div>;\n  }\n\n  return (\n    <Fragment>\n      <HighlightedQuote text={quote.text} author={quote.author} />\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </Fragment>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}